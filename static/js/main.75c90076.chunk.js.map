{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","useState","accordionMsg","actionsToMsg","type","actionTypes","selectIds","ids","state","setState","accordionDispatch","actions","className","msg","id","onClick","collapseAll","expandAll","accordionOn","accordionOff","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.75c90076.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Accordion,\n  AccordionSection,\n  actionTypes,\n  actionsToMsg,\n} from 'react-accordion-composable';\nimport './App.css';\n\nconst App = () => {\n  const [state, setState] = useState({\n    accordionMsg: actionsToMsg({\n      type: actionTypes.selectIds,\n      ids: ['1', '2'],\n    }),\n  });\n\n  const accordionDispatch = actions =>\n    setState({\n      accordionMsg: actionsToMsg(actions),\n    });\n\n  return (\n    <div className=\"App\">\n      <div className=\"Parts\">\n        <div className=\"Part PartFull\">\n          <h1>React-Accordion-Composable Demo</h1>\n        </div>\n\n        <div className=\"Part PartLeft\">\n          <h2>Accordion in action</h2>\n          <p className=\"Highlight Petit\">\n            (click on the title part of any section and see the effect)\n          </p>\n          <Accordion className=\"Accordion\" msg={state.accordionMsg}>\n            <AccordionSection className=\"AccordionSection\" id=\"1\">\n              <h3 className=\"Element\">Title 1 - a single element</h3>\n              <p className=\"BodyElement\">Body 1 - a single element</p>\n            </AccordionSection>\n            <AccordionSection className=\"AccordionSection\" id=\"2\">\n              <h3 className=\"Element\">Title 2</h3>\n              <p className=\"BodyElement\">Body 2</p>\n            </AccordionSection>\n            <AccordionSection className=\"AccordionSection\" id=\"3\">\n              <div className=\"Element\">\n                <div className=\"Flex Element\">\n                  <h3 className=\"FlexElement Element\">Title 3</h3>\n                  <h3 className=\"FlexElement Element\"> - a complex element</h3>\n                </div>\n                <p className=\"Element\">\n                  having a second row. We are still inside the title part that\n                  never collapses.\n                </p>\n              </div>\n              <p className=\"BodyElement\">Body 3 - starts with 2nd Child</p>\n              <p className=\"BodyElement\">\n                continues with 3d Child\n                <br />\n                <br />\n                Lorem and Ipsum were here\n              </p>\n            </AccordionSection>\n          </Accordion>\n        </div>\n\n        <div className=\"Part PartRight\">\n          <h2>Controlling Accordion from outside:</h2>\n          <p className=\"Highlight\">(click on a button and see the effect)</p>\n\n          <div\n            className=\"Button\"\n            onClick={() => accordionDispatch({ type: actionTypes.collapseAll })}\n          >\n            Collapse All\n          </div>\n          <div className=\"Explain\">\n            Collapses all sections and turns Accordion mode ON\n          </div>\n          <div\n            className=\"Button\"\n            onClick={() => accordionDispatch({ type: actionTypes.expandAll })}\n          >\n            Expand All\n          </div>\n          <div className=\"Explain\">\n            Expands all sections and turns Accordion mode OFF\n          </div>\n\n          <div\n            className=\"Button\"\n            onClick={() => accordionDispatch({ type: actionTypes.accordionOn })}\n          >\n            Accordion On\n          </div>\n          <div className=\"Explain\">\n            Turns ON the Accordion mode, when no more then one section can be in\n            expanded state at any given time. Click this button when several\n            sections are expanded and see that only the first of them stay\n            expanded.\n          </div>\n          <div\n            className=\"Button\"\n            onClick={() =>\n              accordionDispatch({ type: actionTypes.accordionOff })\n            }\n          >\n            Accordion Off\n          </div>\n          <div className=\"Explain\">\n            Makes all the sections independent: from now on each section can be\n            expanded / collapsed without affecting siblings. Clicking this\n            button produces no visible change on screen.\n          </div>\n\n          <div\n            className=\"Button\"\n            onClick={() =>\n              accordionDispatch({\n                type: actionTypes.selectIds,\n                ids: ['1', '3'],\n              })\n            }\n          >\n            Select 1 & 3\n          </div>\n          <div className=\"Explain\">\n            Turns Accordion mode OFF and expands sections 1 and 3\n          </div>\n          <div\n            className=\"Button\"\n            onClick={() =>\n              accordionDispatch([\n                //\n                { type: actionTypes.selectIds, ids: ['3'] },\n                { type: actionTypes.accordionOff },\n              ])\n            }\n          >\n            Select 3 & Accordion Off\n          </div>\n          <div className=\"Explain\">\n            Example of dispatching more then one action at a time: expand\n            section 3 only then, as additional action, turn Accordion mode OFF.\n          </div>\n\n          <p>\n            Note, that all the buttons are situated outside of the Accordion\n            element. They <em>talk</em> to Accordion element by{' '}\n            <strong>sending messages with lists of actions</strong> through the\n            props.\n          </p>\n        </div>\n\n        <div className=\"Part PartFull\">\n          <h2>Comments</h2>\n          <p>\n            While Accordion works autonomously, still we can influence it from\n            outside if we like.\n          </p>\n          <p>\n            Buttons 3 and 4 are to switch Accordion mode <strong>ON</strong> and{' '}\n            <strong>OFF</strong>. When in Accordion mode no more then one\n            section can be expanded at any given time. Selecting a section would\n            collapse a previously expanded one, if any. When Accordion mode is\n            OFF then all the sections behave independently and any number of\n            section can be expanded simultaneously.\n          </p>\n          <p>\n            Last button is an example of sending a message with a list of 2\n            actions: `Select section 3 (in whatever mode that is current)` and\n            then `set Accordion mode to Off`. The order of actions is important.\n            One can send any sequence of actions (=commands) to Accordion, but\n            two should be enough to attain any state desired.\n          </p>\n          <p>\n            Section 3 illustrates the fact that contents of both Title part and\n            Body part are completely up to the user. The trick is that whatever\n            is nested as the first child is being treated as the Title, and\n            whatever goes as Child 2, Child 3 etc. - as the Body (which is the\n            subject of expanding/collapsing). This is the reason for\n            'composable' suffix of the name: Accordion is only responsible for\n            showing and hiding stuff, while the stuff itself is whatever is\n            nested inside.\n          </p>\n        </div>\n\n        <div className=\"Part PartFull\">\n          <h2>Links</h2>\n          <ul>\n            <li>\n              <a\n                href=\"https://github.com/heroqu/react-accordion-composable-demo\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                demo repo\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://github.com/heroqu/react-accordion-composable\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Accordion component repo\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://www.npmjs.com/package/react-accordion-composable\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Accordion component npm\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}